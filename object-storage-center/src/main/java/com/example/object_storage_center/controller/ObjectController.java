package com.example.object_storage_center.controller;

import com.example.object_storage_center.dto.ResponseDTO;
import com.example.object_storage_center.service.IObjectService;
import com.example.object_storage_center.util.ResponseUtil;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Base64;

@RestController
@RequestMapping("/object")
@Slf4j
public class ObjectController {

    private final IObjectService objectService;

    public ObjectController(IObjectService objectService) {
        this.objectService = objectService;
    }

    @GetMapping("/get_object")
    public ResponseDTO<Object> getObject(@RequestParam Long id) {
        log.info("invoke get_object, req: {}", id);
        objectService.getObject(id);
        return ResponseUtil.success();
    }

    @GetMapping("/show_object")
    public void showObject(HttpServletResponse response) throws IOException {
        // 将Base64编码的图片数据转换为字节数组
        String a = "";
        byte[] imageBytes = Base64.getDecoder().decode(a);

        // 设置响应的内容类型为图片的MIME类型
        response.setContentType("image/jpeg");

        // 将字节数组写入响应的输出流中
        response.getOutputStream().write(imageBytes);
        response.getOutputStream().flush();
    }

    @PostMapping("/upload_object")
    public ResponseDTO<Object> uploadObject(@RequestPart MultipartFile file) {
        log.info("invoke upload_object, req: {}", file);
        log.info("{} - {} - {} - {}", file.getContentType(), file.getName(), file.getOriginalFilename(), file.getSize());
//        2024-06-11 00:47:40.360 - [http-nio-9999-exec-1] INFO  com.example.object_storage_center.controller.ObjectController - image/jpeg - file - Dingtalk_20240611003046.jpg - 6456
        try {
            String a = Base64.getEncoder().encodeToString(file.getBytes());
            log.info(a);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        objectService.uploadObject();
        return ResponseUtil.success();
    }
}
